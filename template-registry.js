// scripts/generate-registry.js
const fs = require('fs');
const path = require('path');

// All business directories
const businesses = [
  'b2b-services',
  'b2c-services',
  'consultants',
  'doctors-clinics',
  'e-commerce-brands',
  'educational-institutions',
  'fashion-brands',
  'gyms-fitness',
  'hotel-resorts',
  'interior-designers',
  'local-businesses',
  'pharma-companies',
  'real-estate',
  'restaurants-cafes',
  'startups-entrepreneurs',
  'travel-tourism'
];

// All service files
const services = [
  'aso-services',
  '360-digital-marketing',
  'ecommerce-marketing',
  'gmb-services',
  'google-ads',
  'leads-generation',
  'local-seo',
  'marketing-automation',
  'meta-ads',
  'mobile-apps-development',
  'other-ads',
  'seo-services',
  'social-media-marketing',
  'web-design-development',
  'website-maintenance'
];

// Generate valid TypeScript variable names
function toCamelCase(str) {
  return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
}

// Generate the registry file content
function generateRegistryContent() {
  let imports = [];
  let maps = [];
  
  businesses.forEach(business => {
    services.forEach(service => {
      const varName = `${toCamelCase(business)}${toCamelCase(service)}`;
      const importPath = `./data/${business}/${service}`;
      
      imports.push(`import * as ${varName} from '${importPath}';`);
      maps.push(`${varName}.map`);
    });
  });

  return `// Auto-generated by scripts/generate-registry.js
// Do not edit this file manually - run the generator instead

import { ServiceBusinessMap } from './map-service-business.types';

// Business-Service Imports
${imports.join('\n')}

const maps: ServiceBusinessMap[] = [
  ${maps.join(',\n  ')}
];

export const getMap = (service: string, business: string): ServiceBusinessMap | undefined =>
  maps.find(m => m.service === service && m.business === business);

export const getAllMaps = (): ServiceBusinessMap[] => maps;
`;
}

// Main function
function generateRegistry() {
  const outputPath = path.join(__dirname, '/map-service-business/service-business-registry.ts');
  const content = generateRegistryContent();
  
  // Create directories if they don't exist
  fs.mkdirSync(path.dirname(outputPath), { recursive: true });
  
  // Write the file
  fs.writeFileSync(outputPath, content);
  
  console.log(`âœ… Successfully generated registry file at: ${outputPath}`);
  console.log(`ðŸ“¦ Total business-service combinations: ${businesses.length * services.length}`);
}

// Run the generator
generateRegistry();